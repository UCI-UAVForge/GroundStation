// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uavforge {

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
struct PacketOneofInstance {
  const ::uavforge::TelemetryPacket* telem_;
  const ::uavforge::ActionPacket* comm_;
  const ::uavforge::InfoPacket* info_;
  const ::uavforge::AckPacket* ack_;
}* Packet_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TelemetryPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelemetryPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionPacket_WaypointPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionPacket_WaypointPacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionPacket_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InfoPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Packet_2eproto() {
  protobuf_AddDesc_Packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Packet.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, telem_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, comm_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, contents_),
  };
  Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _unknown_fields_),
      -1,
      Packet_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet));
  Packet_MessageType_descriptor_ = Packet_descriptor_->enum_type(0);
  TelemetryPacket_descriptor_ = file->message_type(1);
  static const int TelemetryPacket_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, accx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, accy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, accz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, barometer_),
  };
  TelemetryPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TelemetryPacket_descriptor_,
      TelemetryPacket::default_instance_,
      TelemetryPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TelemetryPacket));
  ActionPacket_descriptor_ = file->message_type(2);
  static const int ActionPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket, waypoints_),
  };
  ActionPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionPacket_descriptor_,
      ActionPacket::default_instance_,
      ActionPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionPacket));
  ActionPacket_WaypointPacket_descriptor_ = ActionPacket_descriptor_->nested_type(0);
  static const int ActionPacket_WaypointPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket_WaypointPacket, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket_WaypointPacket, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket_WaypointPacket, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket_WaypointPacket, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket_WaypointPacket, speed_),
  };
  ActionPacket_WaypointPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionPacket_WaypointPacket_descriptor_,
      ActionPacket_WaypointPacket::default_instance_,
      ActionPacket_WaypointPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket_WaypointPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPacket_WaypointPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionPacket_WaypointPacket));
  ActionPacket_ActionType_descriptor_ = ActionPacket_descriptor_->enum_type(0);
  InfoPacket_descriptor_ = file->message_type(3);
  static const int InfoPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoPacket, pointsstorable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoPacket, battery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoPacket, infostrings_),
  };
  InfoPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoPacket_descriptor_,
      InfoPacket::default_instance_,
      InfoPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoPacket));
  AckPacket_descriptor_ = file->message_type(4);
  static const int AckPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPacket, acktimestamp_),
  };
  AckPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPacket_descriptor_,
      AckPacket::default_instance_,
      AckPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TelemetryPacket_descriptor_, &TelemetryPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionPacket_descriptor_, &ActionPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionPacket_WaypointPacket_descriptor_, &ActionPacket_WaypointPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoPacket_descriptor_, &InfoPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPacket_descriptor_, &AckPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Packet_2eproto() {
  delete Packet::default_instance_;
  delete Packet_default_oneof_instance_;
  delete Packet_reflection_;
  delete TelemetryPacket::default_instance_;
  delete TelemetryPacket_reflection_;
  delete ActionPacket::default_instance_;
  delete ActionPacket_reflection_;
  delete ActionPacket_WaypointPacket::default_instance_;
  delete ActionPacket_WaypointPacket_reflection_;
  delete InfoPacket::default_instance_;
  delete InfoPacket_reflection_;
  delete AckPacket::default_instance_;
  delete AckPacket_reflection_;
}

void protobuf_AddDesc_Packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Packet.proto\022\010uavforge\"\326\002\n\006Packet\022\021\n\tt"
    "imestamp\030\001 \002(\004\022\016\n\006sender\030\002 \002(\t\022\016\n\006target"
    "\030\003 \002(\t\022*\n\004type\030\004 \002(\0162\034.uavforge.Packet.M"
    "essageType\022*\n\005telem\030\005 \001(\0132\031.uavforge.Tel"
    "emetryPacketH\000\022&\n\004comm\030\006 \001(\0132\026.uavforge."
    "ActionPacketH\000\022$\n\004info\030\010 \001(\0132\024.uavforge."
    "InfoPacketH\000\022\"\n\003ack\030\t \001(\0132\023.uavforge.Ack"
    "PacketH\000\"C\n\013MessageType\022\007\n\003ACK\020\000\022\t\n\005TELE"
    "M\020\001\022\n\n\006ACTION\020\002\022\n\n\006UPDATE\020\003\022\010\n\004INFO\020\004B\n\n"
    "\010contents\"\275\001\n\017TelemetryPacket\022\r\n\005seqNo\030\001"
    " \002(\005\022\014\n\004accx\030\002 \002(\002\022\014\n\004accy\030\003 \002(\002\022\014\n\004accz"
    "\030\004 \002(\002\022\r\n\005pitch\030\005 \002(\002\022\014\n\004roll\030\006 \002(\002\022\013\n\003y"
    "aw\030\007 \002(\002\022\013\n\003lat\030\010 \002(\001\022\013\n\003lng\030\t \002(\001\022\013\n\003al"
    "t\030\n \002(\002\022\r\n\005speed\030\013 \002(\002\022\021\n\tbarometer\030\014 \002("
    "\005\"\341\002\n\014ActionPacket\022\020\n\010priority\030\001 \002(\005\0226\n\013"
    "action_type\030\002 \002(\0162!.uavforge.ActionPacke"
    "t.ActionType\0228\n\twaypoints\030\003 \003(\0132%.uavfor"
    "ge.ActionPacket.WaypointPacket\032U\n\016Waypoi"
    "ntPacket\022\r\n\005seqNo\030\001 \002(\005\022\013\n\003lat\030\002 \002(\001\022\013\n\003"
    "lng\030\003 \002(\001\022\013\n\003alt\030\004 \002(\002\022\r\n\005speed\030\005 \002(\002\"v\n"
    "\nActionType\022\t\n\005START\020\000\022\020\n\014REQUEST_INFO\020\001"
    "\022\020\n\014ADD_WAYPOINT\020\002\022\014\n\010SET_HOME\020\003\022\023\n\017REMO"
    "VE_WAYPOINT\020\004\022\010\n\004STOP\020\016\022\014\n\010SHUTDOWN\020\017\"J\n"
    "\nInfoPacket\022\026\n\016pointsStorable\030\001 \001(\r\022\017\n\007b"
    "attery\030\002 \001(\r\022\023\n\013infoStrings\030\003 \003(\t\"!\n\tAck"
    "Packet\022\024\n\014ackTimestamp\030\001 \002(\004", 1028);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Packet.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  Packet_default_oneof_instance_ = new PacketOneofInstance;
  TelemetryPacket::default_instance_ = new TelemetryPacket();
  ActionPacket::default_instance_ = new ActionPacket();
  ActionPacket_WaypointPacket::default_instance_ = new ActionPacket_WaypointPacket();
  InfoPacket::default_instance_ = new InfoPacket();
  AckPacket::default_instance_ = new AckPacket();
  Packet::default_instance_->InitAsDefaultInstance();
  TelemetryPacket::default_instance_->InitAsDefaultInstance();
  ActionPacket::default_instance_->InitAsDefaultInstance();
  ActionPacket_WaypointPacket::default_instance_->InitAsDefaultInstance();
  InfoPacket::default_instance_->InitAsDefaultInstance();
  AckPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Packet_2eproto {
  StaticDescriptorInitializer_Packet_2eproto() {
    protobuf_AddDesc_Packet_2eproto();
  }
} static_descriptor_initializer_Packet_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Packet_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_MessageType_descriptor_;
}
bool Packet_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_MessageType Packet::ACK;
const Packet_MessageType Packet::TELEM;
const Packet_MessageType Packet::ACTION;
const Packet_MessageType Packet::UPDATE;
const Packet_MessageType Packet::INFO;
const Packet_MessageType Packet::MessageType_MIN;
const Packet_MessageType Packet::MessageType_MAX;
const int Packet::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet::kTimestampFieldNumber;
const int Packet::kSenderFieldNumber;
const int Packet::kTargetFieldNumber;
const int Packet::kTypeFieldNumber;
const int Packet::kTelemFieldNumber;
const int Packet::kCommFieldNumber;
const int Packet::kInfoFieldNumber;
const int Packet::kAckFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.Packet)
}

void Packet::InitAsDefaultInstance() {
  Packet_default_oneof_instance_->telem_ = const_cast< ::uavforge::TelemetryPacket*>(&::uavforge::TelemetryPacket::default_instance());
  Packet_default_oneof_instance_->comm_ = const_cast< ::uavforge::ActionPacket*>(&::uavforge::ActionPacket::default_instance());
  Packet_default_oneof_instance_->info_ = const_cast< ::uavforge::InfoPacket*>(&::uavforge::InfoPacket::default_instance());
  Packet_default_oneof_instance_->ack_ = const_cast< ::uavforge::AckPacket*>(&::uavforge::AckPacket::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.Packet)
}

void Packet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_contents();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:uavforge.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (has_contents()) {
    clear_contents();
  }
  if (this != default_instance_) {
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::clear_contents() {
  switch(contents_case()) {
    case kTelem: {
      delete contents_.telem_;
      break;
    }
    case kComm: {
      delete contents_.comm_;
      break;
    }
    case kInfo: {
      delete contents_.info_;
      break;
    }
    case kAck: {
      delete contents_.ack_;
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTS_NOT_SET;
}


void Packet::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
    type_ = 0;
  }
  clear_contents();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }

      // required string sender = 2;
      case 2: {
        if (tag == 18) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // required string target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .uavforge.Packet.MessageType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uavforge::Packet_MessageType_IsValid(value)) {
            set_type(static_cast< ::uavforge::Packet_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_telem;
        break;
      }

      // optional .uavforge.TelemetryPacket telem = 5;
      case 5: {
        if (tag == 42) {
         parse_telem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_comm;
        break;
      }

      // optional .uavforge.ActionPacket comm = 6;
      case 6: {
        if (tag == 50) {
         parse_comm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_info;
        break;
      }

      // optional .uavforge.InfoPacket info = 8;
      case 8: {
        if (tag == 66) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ack;
        break;
      }

      // optional .uavforge.AckPacket ack = 9;
      case 9: {
        if (tag == 74) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.Packet)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender(), output);
  }

  // required string target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target(), output);
  }

  // required .uavforge.Packet.MessageType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .uavforge.TelemetryPacket telem = 5;
  if (has_telem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->telem(), output);
  }

  // optional .uavforge.ActionPacket comm = 6;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->comm(), output);
  }

  // optional .uavforge.InfoPacket info = 8;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->info(), output);
  }

  // optional .uavforge.AckPacket ack = 9;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.Packet)
}

::google::protobuf::uint8* Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.Packet)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // required string target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  // required .uavforge.Packet.MessageType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .uavforge.TelemetryPacket telem = 5;
  if (has_telem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->telem(), target);
  }

  // optional .uavforge.ActionPacket comm = 6;
  if (has_comm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->comm(), target);
  }

  // optional .uavforge.InfoPacket info = 8;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->info(), target);
  }

  // optional .uavforge.AckPacket ack = 9;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.Packet)
  return target;
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required string sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required string target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // required .uavforge.Packet.MessageType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (contents_case()) {
    // optional .uavforge.TelemetryPacket telem = 5;
    case kTelem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->telem());
      break;
    }
    // optional .uavforge.ActionPacket comm = 6;
    case kComm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comm());
      break;
    }
    // optional .uavforge.InfoPacket info = 8;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
      break;
    }
    // optional .uavforge.AckPacket ack = 9;
    case kAck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.contents_case()) {
    case kTelem: {
      mutable_telem()->::uavforge::TelemetryPacket::MergeFrom(from.telem());
      break;
    }
    case kComm: {
      mutable_comm()->::uavforge::ActionPacket::MergeFrom(from.comm());
      break;
    }
    case kInfo: {
      mutable_info()->::uavforge::InfoPacket::MergeFrom(from.info());
      break;
    }
    case kAck: {
      mutable_ack()->::uavforge::AckPacket::MergeFrom(from.ack());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_telem()) {
    if (!this->telem().IsInitialized()) return false;
  }
  if (has_comm()) {
    if (!this->comm().IsInitialized()) return false;
  }
  if (has_ack()) {
    if (!this->ack().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(sender_, other->sender_);
    std::swap(target_, other->target_);
    std::swap(type_, other->type_);
    std::swap(contents_, other->contents_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TelemetryPacket::kSeqNoFieldNumber;
const int TelemetryPacket::kAccxFieldNumber;
const int TelemetryPacket::kAccyFieldNumber;
const int TelemetryPacket::kAcczFieldNumber;
const int TelemetryPacket::kPitchFieldNumber;
const int TelemetryPacket::kRollFieldNumber;
const int TelemetryPacket::kYawFieldNumber;
const int TelemetryPacket::kLatFieldNumber;
const int TelemetryPacket::kLngFieldNumber;
const int TelemetryPacket::kAltFieldNumber;
const int TelemetryPacket::kSpeedFieldNumber;
const int TelemetryPacket::kBarometerFieldNumber;
#endif  // !_MSC_VER

TelemetryPacket::TelemetryPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.TelemetryPacket)
}

void TelemetryPacket::InitAsDefaultInstance() {
}

TelemetryPacket::TelemetryPacket(const TelemetryPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.TelemetryPacket)
}

void TelemetryPacket::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0;
  accx_ = 0;
  accy_ = 0;
  accz_ = 0;
  pitch_ = 0;
  roll_ = 0;
  yaw_ = 0;
  lat_ = 0;
  lng_ = 0;
  alt_ = 0;
  speed_ = 0;
  barometer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelemetryPacket::~TelemetryPacket() {
  // @@protoc_insertion_point(destructor:uavforge.TelemetryPacket)
  SharedDtor();
}

void TelemetryPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelemetryPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelemetryPacket_descriptor_;
}

const TelemetryPacket& TelemetryPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_2eproto();
  return *default_instance_;
}

TelemetryPacket* TelemetryPacket::default_instance_ = NULL;

TelemetryPacket* TelemetryPacket::New() const {
  return new TelemetryPacket;
}

void TelemetryPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TelemetryPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(seqno_, yaw_);
  }
  ZR_(alt_, barometer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TelemetryPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.TelemetryPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seqNo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_accx;
        break;
      }

      // required float accx = 2;
      case 2: {
        if (tag == 21) {
         parse_accx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accx_)));
          set_has_accx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_accy;
        break;
      }

      // required float accy = 3;
      case 3: {
        if (tag == 29) {
         parse_accy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accy_)));
          set_has_accy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_accz;
        break;
      }

      // required float accz = 4;
      case 4: {
        if (tag == 37) {
         parse_accz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accz_)));
          set_has_accz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pitch;
        break;
      }

      // required float pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_roll;
        break;
      }

      // required float roll = 6;
      case 6: {
        if (tag == 53) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_yaw;
        break;
      }

      // required float yaw = 7;
      case 7: {
        if (tag == 61) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lat;
        break;
      }

      // required double lat = 8;
      case 8: {
        if (tag == 65) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_lng;
        break;
      }

      // required double lng = 9;
      case 9: {
        if (tag == 73) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_alt;
        break;
      }

      // required float alt = 10;
      case 10: {
        if (tag == 85) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_speed;
        break;
      }

      // required float speed = 11;
      case 11: {
        if (tag == 93) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_barometer;
        break;
      }

      // required int32 barometer = 12;
      case 12: {
        if (tag == 96) {
         parse_barometer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &barometer_)));
          set_has_barometer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.TelemetryPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.TelemetryPacket)
  return false;
#undef DO_
}

void TelemetryPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.TelemetryPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seqno(), output);
  }

  // required float accx = 2;
  if (has_accx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->accx(), output);
  }

  // required float accy = 3;
  if (has_accy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->accy(), output);
  }

  // required float accz = 4;
  if (has_accz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->accz(), output);
  }

  // required float pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // required float roll = 6;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->roll(), output);
  }

  // required float yaw = 7;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw(), output);
  }

  // required double lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // required double lng = 9;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lng(), output);
  }

  // required float alt = 10;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->alt(), output);
  }

  // required float speed = 11;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->speed(), output);
  }

  // required int32 barometer = 12;
  if (has_barometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->barometer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.TelemetryPacket)
}

::google::protobuf::uint8* TelemetryPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.TelemetryPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seqno(), target);
  }

  // required float accx = 2;
  if (has_accx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->accx(), target);
  }

  // required float accy = 3;
  if (has_accy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->accy(), target);
  }

  // required float accz = 4;
  if (has_accz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->accz(), target);
  }

  // required float pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // required float roll = 6;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->roll(), target);
  }

  // required float yaw = 7;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw(), target);
  }

  // required double lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // required double lng = 9;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lng(), target);
  }

  // required float alt = 10;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->alt(), target);
  }

  // required float speed = 11;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->speed(), target);
  }

  // required int32 barometer = 12;
  if (has_barometer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->barometer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.TelemetryPacket)
  return target;
}

int TelemetryPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seqNo = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }

    // required float accx = 2;
    if (has_accx()) {
      total_size += 1 + 4;
    }

    // required float accy = 3;
    if (has_accy()) {
      total_size += 1 + 4;
    }

    // required float accz = 4;
    if (has_accz()) {
      total_size += 1 + 4;
    }

    // required float pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float roll = 6;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float yaw = 7;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // required double lat = 8;
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double lng = 9;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // required float alt = 10;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // required float speed = 11;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // required int32 barometer = 12;
    if (has_barometer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->barometer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TelemetryPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TelemetryPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TelemetryPacket::MergeFrom(const TelemetryPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_accx()) {
      set_accx(from.accx());
    }
    if (from.has_accy()) {
      set_accy(from.accy());
    }
    if (from.has_accz()) {
      set_accz(from.accz());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_barometer()) {
      set_barometer(from.barometer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TelemetryPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryPacket::CopyFrom(const TelemetryPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void TelemetryPacket::Swap(TelemetryPacket* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(accx_, other->accx_);
    std::swap(accy_, other->accy_);
    std::swap(accz_, other->accz_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(yaw_, other->yaw_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(alt_, other->alt_);
    std::swap(speed_, other->speed_);
    std::swap(barometer_, other->barometer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TelemetryPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelemetryPacket_descriptor_;
  metadata.reflection = TelemetryPacket_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ActionPacket_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionPacket_ActionType_descriptor_;
}
bool ActionPacket_ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ActionPacket_ActionType ActionPacket::START;
const ActionPacket_ActionType ActionPacket::REQUEST_INFO;
const ActionPacket_ActionType ActionPacket::ADD_WAYPOINT;
const ActionPacket_ActionType ActionPacket::SET_HOME;
const ActionPacket_ActionType ActionPacket::REMOVE_WAYPOINT;
const ActionPacket_ActionType ActionPacket::STOP;
const ActionPacket_ActionType ActionPacket::SHUTDOWN;
const ActionPacket_ActionType ActionPacket::ActionType_MIN;
const ActionPacket_ActionType ActionPacket::ActionType_MAX;
const int ActionPacket::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ActionPacket_WaypointPacket::kSeqNoFieldNumber;
const int ActionPacket_WaypointPacket::kLatFieldNumber;
const int ActionPacket_WaypointPacket::kLngFieldNumber;
const int ActionPacket_WaypointPacket::kAltFieldNumber;
const int ActionPacket_WaypointPacket::kSpeedFieldNumber;
#endif  // !_MSC_VER

ActionPacket_WaypointPacket::ActionPacket_WaypointPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.ActionPacket.WaypointPacket)
}

void ActionPacket_WaypointPacket::InitAsDefaultInstance() {
}

ActionPacket_WaypointPacket::ActionPacket_WaypointPacket(const ActionPacket_WaypointPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.ActionPacket.WaypointPacket)
}

void ActionPacket_WaypointPacket::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0;
  lat_ = 0;
  lng_ = 0;
  alt_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionPacket_WaypointPacket::~ActionPacket_WaypointPacket() {
  // @@protoc_insertion_point(destructor:uavforge.ActionPacket.WaypointPacket)
  SharedDtor();
}

void ActionPacket_WaypointPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionPacket_WaypointPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionPacket_WaypointPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionPacket_WaypointPacket_descriptor_;
}

const ActionPacket_WaypointPacket& ActionPacket_WaypointPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_2eproto();
  return *default_instance_;
}

ActionPacket_WaypointPacket* ActionPacket_WaypointPacket::default_instance_ = NULL;

ActionPacket_WaypointPacket* ActionPacket_WaypointPacket::New() const {
  return new ActionPacket_WaypointPacket;
}

void ActionPacket_WaypointPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionPacket_WaypointPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lat_, speed_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionPacket_WaypointPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.ActionPacket.WaypointPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seqNo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (tag == 17) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lng;
        break;
      }

      // required double lng = 3;
      case 3: {
        if (tag == 25) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_alt;
        break;
      }

      // required float alt = 4;
      case 4: {
        if (tag == 37) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // required float speed = 5;
      case 5: {
        if (tag == 45) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.ActionPacket.WaypointPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.ActionPacket.WaypointPacket)
  return false;
#undef DO_
}

void ActionPacket_WaypointPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.ActionPacket.WaypointPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seqno(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // required double lng = 3;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lng(), output);
  }

  // required float alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alt(), output);
  }

  // required float speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.ActionPacket.WaypointPacket)
}

::google::protobuf::uint8* ActionPacket_WaypointPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.ActionPacket.WaypointPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seqno(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // required double lng = 3;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lng(), target);
  }

  // required float alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alt(), target);
  }

  // required float speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.ActionPacket.WaypointPacket)
  return target;
}

int ActionPacket_WaypointPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seqNo = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }

    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lng = 3;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // required float alt = 4;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // required float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionPacket_WaypointPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionPacket_WaypointPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionPacket_WaypointPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionPacket_WaypointPacket::MergeFrom(const ActionPacket_WaypointPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionPacket_WaypointPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionPacket_WaypointPacket::CopyFrom(const ActionPacket_WaypointPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionPacket_WaypointPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ActionPacket_WaypointPacket::Swap(ActionPacket_WaypointPacket* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(alt_, other->alt_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionPacket_WaypointPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionPacket_WaypointPacket_descriptor_;
  metadata.reflection = ActionPacket_WaypointPacket_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActionPacket::kPriorityFieldNumber;
const int ActionPacket::kActionTypeFieldNumber;
const int ActionPacket::kWaypointsFieldNumber;
#endif  // !_MSC_VER

ActionPacket::ActionPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.ActionPacket)
}

void ActionPacket::InitAsDefaultInstance() {
}

ActionPacket::ActionPacket(const ActionPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.ActionPacket)
}

void ActionPacket::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 0;
  action_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionPacket::~ActionPacket() {
  // @@protoc_insertion_point(destructor:uavforge.ActionPacket)
  SharedDtor();
}

void ActionPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionPacket_descriptor_;
}

const ActionPacket& ActionPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_2eproto();
  return *default_instance_;
}

ActionPacket* ActionPacket::default_instance_ = NULL;

ActionPacket* ActionPacket::New() const {
  return new ActionPacket;
}

void ActionPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(priority_, action_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  waypoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.ActionPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 priority = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action_type;
        break;
      }

      // required .uavforge.ActionPacket.ActionType action_type = 2;
      case 2: {
        if (tag == 16) {
         parse_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uavforge::ActionPacket_ActionType_IsValid(value)) {
            set_action_type(static_cast< ::uavforge::ActionPacket_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_waypoints;
        break;
      }

      // repeated .uavforge.ActionPacket.WaypointPacket waypoints = 3;
      case 3: {
        if (tag == 26) {
         parse_waypoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_waypoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.ActionPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.ActionPacket)
  return false;
#undef DO_
}

void ActionPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.ActionPacket)
  // required int32 priority = 1;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->priority(), output);
  }

  // required .uavforge.ActionPacket.ActionType action_type = 2;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action_type(), output);
  }

  // repeated .uavforge.ActionPacket.WaypointPacket waypoints = 3;
  for (int i = 0; i < this->waypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->waypoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.ActionPacket)
}

::google::protobuf::uint8* ActionPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.ActionPacket)
  // required int32 priority = 1;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->priority(), target);
  }

  // required .uavforge.ActionPacket.ActionType action_type = 2;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action_type(), target);
  }

  // repeated .uavforge.ActionPacket.WaypointPacket waypoints = 3;
  for (int i = 0; i < this->waypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->waypoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.ActionPacket)
  return target;
}

int ActionPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 priority = 1;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // required .uavforge.ActionPacket.ActionType action_type = 2;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }

  }
  // repeated .uavforge.ActionPacket.WaypointPacket waypoints = 3;
  total_size += 1 * this->waypoints_size();
  for (int i = 0; i < this->waypoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waypoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionPacket::MergeFrom(const ActionPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  waypoints_.MergeFrom(from.waypoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionPacket::CopyFrom(const ActionPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->waypoints())) return false;
  return true;
}

void ActionPacket::Swap(ActionPacket* other) {
  if (other != this) {
    std::swap(priority_, other->priority_);
    std::swap(action_type_, other->action_type_);
    waypoints_.Swap(&other->waypoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionPacket_descriptor_;
  metadata.reflection = ActionPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfoPacket::kPointsStorableFieldNumber;
const int InfoPacket::kBatteryFieldNumber;
const int InfoPacket::kInfoStringsFieldNumber;
#endif  // !_MSC_VER

InfoPacket::InfoPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.InfoPacket)
}

void InfoPacket::InitAsDefaultInstance() {
}

InfoPacket::InfoPacket(const InfoPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.InfoPacket)
}

void InfoPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pointsstorable_ = 0u;
  battery_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoPacket::~InfoPacket() {
  // @@protoc_insertion_point(destructor:uavforge.InfoPacket)
  SharedDtor();
}

void InfoPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InfoPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoPacket_descriptor_;
}

const InfoPacket& InfoPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_2eproto();
  return *default_instance_;
}

InfoPacket* InfoPacket::default_instance_ = NULL;

InfoPacket* InfoPacket::New() const {
  return new InfoPacket;
}

void InfoPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InfoPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pointsstorable_, battery_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  infostrings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.InfoPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pointsStorable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointsstorable_)));
          set_has_pointsstorable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battery;
        break;
      }

      // optional uint32 battery = 2;
      case 2: {
        if (tag == 16) {
         parse_battery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battery_)));
          set_has_battery();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infoStrings;
        break;
      }

      // repeated string infoStrings = 3;
      case 3: {
        if (tag == 26) {
         parse_infoStrings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_infostrings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infostrings(this->infostrings_size() - 1).data(),
            this->infostrings(this->infostrings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "infostrings");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infoStrings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.InfoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.InfoPacket)
  return false;
#undef DO_
}

void InfoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.InfoPacket)
  // optional uint32 pointsStorable = 1;
  if (has_pointsstorable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pointsstorable(), output);
  }

  // optional uint32 battery = 2;
  if (has_battery()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battery(), output);
  }

  // repeated string infoStrings = 3;
  for (int i = 0; i < this->infostrings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->infostrings(i).data(), this->infostrings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "infostrings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->infostrings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.InfoPacket)
}

::google::protobuf::uint8* InfoPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.InfoPacket)
  // optional uint32 pointsStorable = 1;
  if (has_pointsstorable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pointsstorable(), target);
  }

  // optional uint32 battery = 2;
  if (has_battery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battery(), target);
  }

  // repeated string infoStrings = 3;
  for (int i = 0; i < this->infostrings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infostrings(i).data(), this->infostrings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "infostrings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->infostrings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.InfoPacket)
  return target;
}

int InfoPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pointsStorable = 1;
    if (has_pointsstorable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointsstorable());
    }

    // optional uint32 battery = 2;
    if (has_battery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battery());
    }

  }
  // repeated string infoStrings = 3;
  total_size += 1 * this->infostrings_size();
  for (int i = 0; i < this->infostrings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->infostrings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoPacket::MergeFrom(const InfoPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  infostrings_.MergeFrom(from.infostrings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pointsstorable()) {
      set_pointsstorable(from.pointsstorable());
    }
    if (from.has_battery()) {
      set_battery(from.battery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoPacket::CopyFrom(const InfoPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoPacket::IsInitialized() const {

  return true;
}

void InfoPacket::Swap(InfoPacket* other) {
  if (other != this) {
    std::swap(pointsstorable_, other->pointsstorable_);
    std::swap(battery_, other->battery_);
    infostrings_.Swap(&other->infostrings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoPacket_descriptor_;
  metadata.reflection = InfoPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPacket::kAckTimestampFieldNumber;
#endif  // !_MSC_VER

AckPacket::AckPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.AckPacket)
}

void AckPacket::InitAsDefaultInstance() {
}

AckPacket::AckPacket(const AckPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.AckPacket)
}

void AckPacket::SharedCtor() {
  _cached_size_ = 0;
  acktimestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPacket::~AckPacket() {
  // @@protoc_insertion_point(destructor:uavforge.AckPacket)
  SharedDtor();
}

void AckPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPacket_descriptor_;
}

const AckPacket& AckPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_2eproto();
  return *default_instance_;
}

AckPacket* AckPacket::default_instance_ = NULL;

AckPacket* AckPacket::New() const {
  return new AckPacket;
}

void AckPacket::Clear() {
  acktimestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.AckPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ackTimestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acktimestamp_)));
          set_has_acktimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.AckPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.AckPacket)
  return false;
#undef DO_
}

void AckPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.AckPacket)
  // required uint64 ackTimestamp = 1;
  if (has_acktimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acktimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.AckPacket)
}

::google::protobuf::uint8* AckPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.AckPacket)
  // required uint64 ackTimestamp = 1;
  if (has_acktimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acktimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.AckPacket)
  return target;
}

int AckPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ackTimestamp = 1;
    if (has_acktimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acktimestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPacket::MergeFrom(const AckPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acktimestamp()) {
      set_acktimestamp(from.acktimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPacket::CopyFrom(const AckPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckPacket::Swap(AckPacket* other) {
  if (other != this) {
    std::swap(acktimestamp_, other->acktimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPacket_descriptor_;
  metadata.reflection = AckPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace uavforge

// @@protoc_insertion_point(global_scope)
