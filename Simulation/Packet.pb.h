// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef PROTOBUF_Packet_2eproto__INCLUDED
#define PROTOBUF_Packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace uavforge {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_2eproto();
void protobuf_AssignDesc_Packet_2eproto();
void protobuf_ShutdownFile_Packet_2eproto();

class Packet;
class TelemetryPacket;
class ActionPacket;
class ActionPacket_WaypointPacket;
class InfoPacket;
class AckPacket;

enum Packet_MessageType {
  Packet_MessageType_ACK = 0,
  Packet_MessageType_TELEM = 1,
  Packet_MessageType_ACTION = 2,
  Packet_MessageType_UPDATE = 3,
  Packet_MessageType_INFO = 4
};
bool Packet_MessageType_IsValid(int value);
const Packet_MessageType Packet_MessageType_MessageType_MIN = Packet_MessageType_ACK;
const Packet_MessageType Packet_MessageType_MessageType_MAX = Packet_MessageType_INFO;
const int Packet_MessageType_MessageType_ARRAYSIZE = Packet_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Packet_MessageType_descriptor();
inline const ::std::string& Packet_MessageType_Name(Packet_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Packet_MessageType_descriptor(), value);
}
inline bool Packet_MessageType_Parse(
    const ::std::string& name, Packet_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Packet_MessageType>(
    Packet_MessageType_descriptor(), name, value);
}
enum ActionPacket_ActionType {
  ActionPacket_ActionType_START = 0,
  ActionPacket_ActionType_REQUEST_INFO = 1,
  ActionPacket_ActionType_ADD_WAYPOINT = 2,
  ActionPacket_ActionType_SET_HOME = 3,
  ActionPacket_ActionType_REMOVE_WAYPOINT = 4,
  ActionPacket_ActionType_STOP = 14,
  ActionPacket_ActionType_SHUTDOWN = 15
};
bool ActionPacket_ActionType_IsValid(int value);
const ActionPacket_ActionType ActionPacket_ActionType_ActionType_MIN = ActionPacket_ActionType_START;
const ActionPacket_ActionType ActionPacket_ActionType_ActionType_MAX = ActionPacket_ActionType_SHUTDOWN;
const int ActionPacket_ActionType_ActionType_ARRAYSIZE = ActionPacket_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionPacket_ActionType_descriptor();
inline const ::std::string& ActionPacket_ActionType_Name(ActionPacket_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionPacket_ActionType_descriptor(), value);
}
inline bool ActionPacket_ActionType_Parse(
    const ::std::string& name, ActionPacket_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionPacket_ActionType>(
    ActionPacket_ActionType_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  enum ContentsCase {
    kTelem = 5,
    kComm = 6,
    kInfo = 8,
    kAck = 9,
    CONTENTS_NOT_SET = 0,
  };

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Packet_MessageType MessageType;
  static const MessageType ACK = Packet_MessageType_ACK;
  static const MessageType TELEM = Packet_MessageType_TELEM;
  static const MessageType ACTION = Packet_MessageType_ACTION;
  static const MessageType UPDATE = Packet_MessageType_UPDATE;
  static const MessageType INFO = Packet_MessageType_INFO;
  static inline bool MessageType_IsValid(int value) {
    return Packet_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Packet_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Packet_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Packet_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Packet_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Packet_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Packet_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required string target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // required .uavforge.Packet.MessageType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::uavforge::Packet_MessageType type() const;
  inline void set_type(::uavforge::Packet_MessageType value);

  // optional .uavforge.TelemetryPacket telem = 5;
  inline bool has_telem() const;
  inline void clear_telem();
  static const int kTelemFieldNumber = 5;
  inline const ::uavforge::TelemetryPacket& telem() const;
  inline ::uavforge::TelemetryPacket* mutable_telem();
  inline ::uavforge::TelemetryPacket* release_telem();
  inline void set_allocated_telem(::uavforge::TelemetryPacket* telem);

  // optional .uavforge.ActionPacket comm = 6;
  inline bool has_comm() const;
  inline void clear_comm();
  static const int kCommFieldNumber = 6;
  inline const ::uavforge::ActionPacket& comm() const;
  inline ::uavforge::ActionPacket* mutable_comm();
  inline ::uavforge::ActionPacket* release_comm();
  inline void set_allocated_comm(::uavforge::ActionPacket* comm);

  // optional .uavforge.InfoPacket info = 8;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 8;
  inline const ::uavforge::InfoPacket& info() const;
  inline ::uavforge::InfoPacket* mutable_info();
  inline ::uavforge::InfoPacket* release_info();
  inline void set_allocated_info(::uavforge::InfoPacket* info);

  // optional .uavforge.AckPacket ack = 9;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 9;
  inline const ::uavforge::AckPacket& ack() const;
  inline ::uavforge::AckPacket* mutable_ack();
  inline ::uavforge::AckPacket* release_ack();
  inline void set_allocated_ack(::uavforge::AckPacket* ack);

  inline ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:uavforge.Packet)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_telem();
  inline void set_has_comm();
  inline void set_has_info();
  inline void set_has_ack();

  inline bool has_contents();
  void clear_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* sender_;
  ::std::string* target_;
  int type_;
  union ContentsUnion {
    ::uavforge::TelemetryPacket* telem_;
    ::uavforge::ActionPacket* comm_;
    ::uavforge::InfoPacket* info_;
    ::uavforge::AckPacket* ack_;
  } contents_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// -------------------------------------------------------------------

class TelemetryPacket : public ::google::protobuf::Message {
 public:
  TelemetryPacket();
  virtual ~TelemetryPacket();

  TelemetryPacket(const TelemetryPacket& from);

  inline TelemetryPacket& operator=(const TelemetryPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryPacket& default_instance();

  void Swap(TelemetryPacket* other);

  // implements Message ----------------------------------------------

  TelemetryPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelemetryPacket& from);
  void MergeFrom(const TelemetryPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seqNo = 1;
  inline bool has_seqno() const;
  inline void clear_seqno();
  static const int kSeqNoFieldNumber = 1;
  inline ::google::protobuf::int32 seqno() const;
  inline void set_seqno(::google::protobuf::int32 value);

  // required float accx = 2;
  inline bool has_accx() const;
  inline void clear_accx();
  static const int kAccxFieldNumber = 2;
  inline float accx() const;
  inline void set_accx(float value);

  // required float accy = 3;
  inline bool has_accy() const;
  inline void clear_accy();
  static const int kAccyFieldNumber = 3;
  inline float accy() const;
  inline void set_accy(float value);

  // required float accz = 4;
  inline bool has_accz() const;
  inline void clear_accz();
  static const int kAcczFieldNumber = 4;
  inline float accz() const;
  inline void set_accz(float value);

  // required float pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline float pitch() const;
  inline void set_pitch(float value);

  // required float roll = 6;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 6;
  inline float roll() const;
  inline void set_roll(float value);

  // required float yaw = 7;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 7;
  inline float yaw() const;
  inline void set_yaw(float value);

  // required double lat = 8;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 8;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lng = 9;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 9;
  inline double lng() const;
  inline void set_lng(double value);

  // required float alt = 10;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 10;
  inline float alt() const;
  inline void set_alt(float value);

  // required float speed = 11;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 11;
  inline float speed() const;
  inline void set_speed(float value);

  // required int32 barometer = 12;
  inline bool has_barometer() const;
  inline void clear_barometer();
  static const int kBarometerFieldNumber = 12;
  inline ::google::protobuf::int32 barometer() const;
  inline void set_barometer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:uavforge.TelemetryPacket)
 private:
  inline void set_has_seqno();
  inline void clear_has_seqno();
  inline void set_has_accx();
  inline void clear_has_accx();
  inline void set_has_accy();
  inline void clear_has_accy();
  inline void set_has_accz();
  inline void clear_has_accz();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();
  inline void set_has_alt();
  inline void clear_has_alt();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_barometer();
  inline void clear_has_barometer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seqno_;
  float accx_;
  float accy_;
  float accz_;
  float pitch_;
  float roll_;
  double lat_;
  float yaw_;
  float alt_;
  double lng_;
  float speed_;
  ::google::protobuf::int32 barometer_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static TelemetryPacket* default_instance_;
};
// -------------------------------------------------------------------

class ActionPacket_WaypointPacket : public ::google::protobuf::Message {
 public:
  ActionPacket_WaypointPacket();
  virtual ~ActionPacket_WaypointPacket();

  ActionPacket_WaypointPacket(const ActionPacket_WaypointPacket& from);

  inline ActionPacket_WaypointPacket& operator=(const ActionPacket_WaypointPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionPacket_WaypointPacket& default_instance();

  void Swap(ActionPacket_WaypointPacket* other);

  // implements Message ----------------------------------------------

  ActionPacket_WaypointPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionPacket_WaypointPacket& from);
  void MergeFrom(const ActionPacket_WaypointPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seqNo = 1;
  inline bool has_seqno() const;
  inline void clear_seqno();
  static const int kSeqNoFieldNumber = 1;
  inline ::google::protobuf::int32 seqno() const;
  inline void set_seqno(::google::protobuf::int32 value);

  // required double lat = 2;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 2;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lng = 3;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 3;
  inline double lng() const;
  inline void set_lng(double value);

  // required float alt = 4;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 4;
  inline float alt() const;
  inline void set_alt(float value);

  // required float speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline float speed() const;
  inline void set_speed(float value);

  // @@protoc_insertion_point(class_scope:uavforge.ActionPacket.WaypointPacket)
 private:
  inline void set_has_seqno();
  inline void clear_has_seqno();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();
  inline void set_has_alt();
  inline void clear_has_alt();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  ::google::protobuf::int32 seqno_;
  float alt_;
  double lng_;
  float speed_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static ActionPacket_WaypointPacket* default_instance_;
};
// -------------------------------------------------------------------

class ActionPacket : public ::google::protobuf::Message {
 public:
  ActionPacket();
  virtual ~ActionPacket();

  ActionPacket(const ActionPacket& from);

  inline ActionPacket& operator=(const ActionPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionPacket& default_instance();

  void Swap(ActionPacket* other);

  // implements Message ----------------------------------------------

  ActionPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionPacket& from);
  void MergeFrom(const ActionPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActionPacket_WaypointPacket WaypointPacket;

  typedef ActionPacket_ActionType ActionType;
  static const ActionType START = ActionPacket_ActionType_START;
  static const ActionType REQUEST_INFO = ActionPacket_ActionType_REQUEST_INFO;
  static const ActionType ADD_WAYPOINT = ActionPacket_ActionType_ADD_WAYPOINT;
  static const ActionType SET_HOME = ActionPacket_ActionType_SET_HOME;
  static const ActionType REMOVE_WAYPOINT = ActionPacket_ActionType_REMOVE_WAYPOINT;
  static const ActionType STOP = ActionPacket_ActionType_STOP;
  static const ActionType SHUTDOWN = ActionPacket_ActionType_SHUTDOWN;
  static inline bool ActionType_IsValid(int value) {
    return ActionPacket_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    ActionPacket_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    ActionPacket_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    ActionPacket_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return ActionPacket_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return ActionPacket_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return ActionPacket_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 priority = 1;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 1;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // required .uavforge.ActionPacket.ActionType action_type = 2;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 2;
  inline ::uavforge::ActionPacket_ActionType action_type() const;
  inline void set_action_type(::uavforge::ActionPacket_ActionType value);

  // repeated .uavforge.ActionPacket.WaypointPacket waypoints = 3;
  inline int waypoints_size() const;
  inline void clear_waypoints();
  static const int kWaypointsFieldNumber = 3;
  inline const ::uavforge::ActionPacket_WaypointPacket& waypoints(int index) const;
  inline ::uavforge::ActionPacket_WaypointPacket* mutable_waypoints(int index);
  inline ::uavforge::ActionPacket_WaypointPacket* add_waypoints();
  inline const ::google::protobuf::RepeatedPtrField< ::uavforge::ActionPacket_WaypointPacket >&
      waypoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::uavforge::ActionPacket_WaypointPacket >*
      mutable_waypoints();

  // @@protoc_insertion_point(class_scope:uavforge.ActionPacket)
 private:
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_action_type();
  inline void clear_has_action_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 priority_;
  int action_type_;
  ::google::protobuf::RepeatedPtrField< ::uavforge::ActionPacket_WaypointPacket > waypoints_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static ActionPacket* default_instance_;
};
// -------------------------------------------------------------------

class InfoPacket : public ::google::protobuf::Message {
 public:
  InfoPacket();
  virtual ~InfoPacket();

  InfoPacket(const InfoPacket& from);

  inline InfoPacket& operator=(const InfoPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoPacket& default_instance();

  void Swap(InfoPacket* other);

  // implements Message ----------------------------------------------

  InfoPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoPacket& from);
  void MergeFrom(const InfoPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pointsStorable = 1;
  inline bool has_pointsstorable() const;
  inline void clear_pointsstorable();
  static const int kPointsStorableFieldNumber = 1;
  inline ::google::protobuf::uint32 pointsstorable() const;
  inline void set_pointsstorable(::google::protobuf::uint32 value);

  // optional uint32 battery = 2;
  inline bool has_battery() const;
  inline void clear_battery();
  static const int kBatteryFieldNumber = 2;
  inline ::google::protobuf::uint32 battery() const;
  inline void set_battery(::google::protobuf::uint32 value);

  // repeated string infoStrings = 3;
  inline int infostrings_size() const;
  inline void clear_infostrings();
  static const int kInfoStringsFieldNumber = 3;
  inline const ::std::string& infostrings(int index) const;
  inline ::std::string* mutable_infostrings(int index);
  inline void set_infostrings(int index, const ::std::string& value);
  inline void set_infostrings(int index, const char* value);
  inline void set_infostrings(int index, const char* value, size_t size);
  inline ::std::string* add_infostrings();
  inline void add_infostrings(const ::std::string& value);
  inline void add_infostrings(const char* value);
  inline void add_infostrings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& infostrings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_infostrings();

  // @@protoc_insertion_point(class_scope:uavforge.InfoPacket)
 private:
  inline void set_has_pointsstorable();
  inline void clear_has_pointsstorable();
  inline void set_has_battery();
  inline void clear_has_battery();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pointsstorable_;
  ::google::protobuf::uint32 battery_;
  ::google::protobuf::RepeatedPtrField< ::std::string> infostrings_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static InfoPacket* default_instance_;
};
// -------------------------------------------------------------------

class AckPacket : public ::google::protobuf::Message {
 public:
  AckPacket();
  virtual ~AckPacket();

  AckPacket(const AckPacket& from);

  inline AckPacket& operator=(const AckPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPacket& default_instance();

  void Swap(AckPacket* other);

  // implements Message ----------------------------------------------

  AckPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPacket& from);
  void MergeFrom(const AckPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ackTimestamp = 1;
  inline bool has_acktimestamp() const;
  inline void clear_acktimestamp();
  static const int kAckTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 acktimestamp() const;
  inline void set_acktimestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:uavforge.AckPacket)
 private:
  inline void set_has_acktimestamp();
  inline void clear_has_acktimestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 acktimestamp_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static AckPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// Packet

// required uint64 timestamp = 1;
inline bool Packet::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Packet::timestamp() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.timestamp)
  return timestamp_;
}
inline void Packet::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:uavforge.Packet.timestamp)
}

// required string sender = 2;
inline bool Packet::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& Packet::sender() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.sender)
  return *sender_;
}
inline void Packet::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:uavforge.Packet.sender)
}
inline void Packet::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:uavforge.Packet.sender)
}
inline void Packet::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uavforge.Packet.sender)
}
inline ::std::string* Packet::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:uavforge.Packet.sender)
  return sender_;
}
inline ::std::string* Packet::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Packet::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:uavforge.Packet.sender)
}

// required string target = 3;
inline bool Packet::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_target() {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& Packet::target() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.target)
  return *target_;
}
inline void Packet::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set:uavforge.Packet.target)
}
inline void Packet::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set_char:uavforge.Packet.target)
}
inline void Packet::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uavforge.Packet.target)
}
inline ::std::string* Packet::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:uavforge.Packet.target)
  return target_;
}
inline ::std::string* Packet::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Packet::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:uavforge.Packet.target)
}

// required .uavforge.Packet.MessageType type = 4;
inline bool Packet::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::uavforge::Packet_MessageType Packet::type() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.type)
  return static_cast< ::uavforge::Packet_MessageType >(type_);
}
inline void Packet::set_type(::uavforge::Packet_MessageType value) {
  assert(::uavforge::Packet_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:uavforge.Packet.type)
}

// optional .uavforge.TelemetryPacket telem = 5;
inline bool Packet::has_telem() const {
  return contents_case() == kTelem;
}
inline void Packet::set_has_telem() {
  _oneof_case_[0] = kTelem;
}
inline void Packet::clear_telem() {
  if (has_telem()) {
    delete contents_.telem_;
    clear_has_contents();
  }
}
inline const ::uavforge::TelemetryPacket& Packet::telem() const {
  return has_telem() ? *contents_.telem_
                      : ::uavforge::TelemetryPacket::default_instance();
}
inline ::uavforge::TelemetryPacket* Packet::mutable_telem() {
  if (!has_telem()) {
    clear_contents();
    set_has_telem();
    contents_.telem_ = new ::uavforge::TelemetryPacket;
  }
  return contents_.telem_;
}
inline ::uavforge::TelemetryPacket* Packet::release_telem() {
  if (has_telem()) {
    clear_has_contents();
    ::uavforge::TelemetryPacket* temp = contents_.telem_;
    contents_.telem_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_telem(::uavforge::TelemetryPacket* telem) {
  clear_contents();
  if (telem) {
    set_has_telem();
    contents_.telem_ = telem;
  }
}

// optional .uavforge.ActionPacket comm = 6;
inline bool Packet::has_comm() const {
  return contents_case() == kComm;
}
inline void Packet::set_has_comm() {
  _oneof_case_[0] = kComm;
}
inline void Packet::clear_comm() {
  if (has_comm()) {
    delete contents_.comm_;
    clear_has_contents();
  }
}
inline const ::uavforge::ActionPacket& Packet::comm() const {
  return has_comm() ? *contents_.comm_
                      : ::uavforge::ActionPacket::default_instance();
}
inline ::uavforge::ActionPacket* Packet::mutable_comm() {
  if (!has_comm()) {
    clear_contents();
    set_has_comm();
    contents_.comm_ = new ::uavforge::ActionPacket;
  }
  return contents_.comm_;
}
inline ::uavforge::ActionPacket* Packet::release_comm() {
  if (has_comm()) {
    clear_has_contents();
    ::uavforge::ActionPacket* temp = contents_.comm_;
    contents_.comm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_comm(::uavforge::ActionPacket* comm) {
  clear_contents();
  if (comm) {
    set_has_comm();
    contents_.comm_ = comm;
  }
}

// optional .uavforge.InfoPacket info = 8;
inline bool Packet::has_info() const {
  return contents_case() == kInfo;
}
inline void Packet::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void Packet::clear_info() {
  if (has_info()) {
    delete contents_.info_;
    clear_has_contents();
  }
}
inline const ::uavforge::InfoPacket& Packet::info() const {
  return has_info() ? *contents_.info_
                      : ::uavforge::InfoPacket::default_instance();
}
inline ::uavforge::InfoPacket* Packet::mutable_info() {
  if (!has_info()) {
    clear_contents();
    set_has_info();
    contents_.info_ = new ::uavforge::InfoPacket;
  }
  return contents_.info_;
}
inline ::uavforge::InfoPacket* Packet::release_info() {
  if (has_info()) {
    clear_has_contents();
    ::uavforge::InfoPacket* temp = contents_.info_;
    contents_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_info(::uavforge::InfoPacket* info) {
  clear_contents();
  if (info) {
    set_has_info();
    contents_.info_ = info;
  }
}

// optional .uavforge.AckPacket ack = 9;
inline bool Packet::has_ack() const {
  return contents_case() == kAck;
}
inline void Packet::set_has_ack() {
  _oneof_case_[0] = kAck;
}
inline void Packet::clear_ack() {
  if (has_ack()) {
    delete contents_.ack_;
    clear_has_contents();
  }
}
inline const ::uavforge::AckPacket& Packet::ack() const {
  return has_ack() ? *contents_.ack_
                      : ::uavforge::AckPacket::default_instance();
}
inline ::uavforge::AckPacket* Packet::mutable_ack() {
  if (!has_ack()) {
    clear_contents();
    set_has_ack();
    contents_.ack_ = new ::uavforge::AckPacket;
  }
  return contents_.ack_;
}
inline ::uavforge::AckPacket* Packet::release_ack() {
  if (has_ack()) {
    clear_has_contents();
    ::uavforge::AckPacket* temp = contents_.ack_;
    contents_.ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_ack(::uavforge::AckPacket* ack) {
  clear_contents();
  if (ack) {
    set_has_ack();
    contents_.ack_ = ack;
  }
}

inline bool Packet::has_contents() {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void Packet::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline Packet::ContentsCase Packet::contents_case() const {
  return Packet::ContentsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TelemetryPacket

// required int32 seqNo = 1;
inline bool TelemetryPacket::has_seqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelemetryPacket::set_has_seqno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelemetryPacket::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelemetryPacket::clear_seqno() {
  seqno_ = 0;
  clear_has_seqno();
}
inline ::google::protobuf::int32 TelemetryPacket::seqno() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.seqNo)
  return seqno_;
}
inline void TelemetryPacket::set_seqno(::google::protobuf::int32 value) {
  set_has_seqno();
  seqno_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.seqNo)
}

// required float accx = 2;
inline bool TelemetryPacket::has_accx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelemetryPacket::set_has_accx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelemetryPacket::clear_has_accx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelemetryPacket::clear_accx() {
  accx_ = 0;
  clear_has_accx();
}
inline float TelemetryPacket::accx() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.accx)
  return accx_;
}
inline void TelemetryPacket::set_accx(float value) {
  set_has_accx();
  accx_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.accx)
}

// required float accy = 3;
inline bool TelemetryPacket::has_accy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelemetryPacket::set_has_accy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelemetryPacket::clear_has_accy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelemetryPacket::clear_accy() {
  accy_ = 0;
  clear_has_accy();
}
inline float TelemetryPacket::accy() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.accy)
  return accy_;
}
inline void TelemetryPacket::set_accy(float value) {
  set_has_accy();
  accy_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.accy)
}

// required float accz = 4;
inline bool TelemetryPacket::has_accz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelemetryPacket::set_has_accz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelemetryPacket::clear_has_accz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelemetryPacket::clear_accz() {
  accz_ = 0;
  clear_has_accz();
}
inline float TelemetryPacket::accz() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.accz)
  return accz_;
}
inline void TelemetryPacket::set_accz(float value) {
  set_has_accz();
  accz_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.accz)
}

// required float pitch = 5;
inline bool TelemetryPacket::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelemetryPacket::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelemetryPacket::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelemetryPacket::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float TelemetryPacket::pitch() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.pitch)
  return pitch_;
}
inline void TelemetryPacket::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.pitch)
}

// required float roll = 6;
inline bool TelemetryPacket::has_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelemetryPacket::set_has_roll() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelemetryPacket::clear_has_roll() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelemetryPacket::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float TelemetryPacket::roll() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.roll)
  return roll_;
}
inline void TelemetryPacket::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.roll)
}

// required float yaw = 7;
inline bool TelemetryPacket::has_yaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TelemetryPacket::set_has_yaw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TelemetryPacket::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TelemetryPacket::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float TelemetryPacket::yaw() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.yaw)
  return yaw_;
}
inline void TelemetryPacket::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.yaw)
}

// required double lat = 8;
inline bool TelemetryPacket::has_lat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TelemetryPacket::set_has_lat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TelemetryPacket::clear_has_lat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TelemetryPacket::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double TelemetryPacket::lat() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.lat)
  return lat_;
}
inline void TelemetryPacket::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.lat)
}

// required double lng = 9;
inline bool TelemetryPacket::has_lng() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TelemetryPacket::set_has_lng() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TelemetryPacket::clear_has_lng() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TelemetryPacket::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double TelemetryPacket::lng() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.lng)
  return lng_;
}
inline void TelemetryPacket::set_lng(double value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.lng)
}

// required float alt = 10;
inline bool TelemetryPacket::has_alt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TelemetryPacket::set_has_alt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TelemetryPacket::clear_has_alt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TelemetryPacket::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
inline float TelemetryPacket::alt() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.alt)
  return alt_;
}
inline void TelemetryPacket::set_alt(float value) {
  set_has_alt();
  alt_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.alt)
}

// required float speed = 11;
inline bool TelemetryPacket::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TelemetryPacket::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TelemetryPacket::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TelemetryPacket::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float TelemetryPacket::speed() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.speed)
  return speed_;
}
inline void TelemetryPacket::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.speed)
}

// required int32 barometer = 12;
inline bool TelemetryPacket::has_barometer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TelemetryPacket::set_has_barometer() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TelemetryPacket::clear_has_barometer() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TelemetryPacket::clear_barometer() {
  barometer_ = 0;
  clear_has_barometer();
}
inline ::google::protobuf::int32 TelemetryPacket::barometer() const {
  // @@protoc_insertion_point(field_get:uavforge.TelemetryPacket.barometer)
  return barometer_;
}
inline void TelemetryPacket::set_barometer(::google::protobuf::int32 value) {
  set_has_barometer();
  barometer_ = value;
  // @@protoc_insertion_point(field_set:uavforge.TelemetryPacket.barometer)
}

// -------------------------------------------------------------------

// ActionPacket_WaypointPacket

// required int32 seqNo = 1;
inline bool ActionPacket_WaypointPacket::has_seqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionPacket_WaypointPacket::set_has_seqno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionPacket_WaypointPacket::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionPacket_WaypointPacket::clear_seqno() {
  seqno_ = 0;
  clear_has_seqno();
}
inline ::google::protobuf::int32 ActionPacket_WaypointPacket::seqno() const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.WaypointPacket.seqNo)
  return seqno_;
}
inline void ActionPacket_WaypointPacket::set_seqno(::google::protobuf::int32 value) {
  set_has_seqno();
  seqno_ = value;
  // @@protoc_insertion_point(field_set:uavforge.ActionPacket.WaypointPacket.seqNo)
}

// required double lat = 2;
inline bool ActionPacket_WaypointPacket::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionPacket_WaypointPacket::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionPacket_WaypointPacket::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionPacket_WaypointPacket::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double ActionPacket_WaypointPacket::lat() const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.WaypointPacket.lat)
  return lat_;
}
inline void ActionPacket_WaypointPacket::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:uavforge.ActionPacket.WaypointPacket.lat)
}

// required double lng = 3;
inline bool ActionPacket_WaypointPacket::has_lng() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionPacket_WaypointPacket::set_has_lng() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionPacket_WaypointPacket::clear_has_lng() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionPacket_WaypointPacket::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double ActionPacket_WaypointPacket::lng() const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.WaypointPacket.lng)
  return lng_;
}
inline void ActionPacket_WaypointPacket::set_lng(double value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:uavforge.ActionPacket.WaypointPacket.lng)
}

// required float alt = 4;
inline bool ActionPacket_WaypointPacket::has_alt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionPacket_WaypointPacket::set_has_alt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionPacket_WaypointPacket::clear_has_alt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionPacket_WaypointPacket::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
inline float ActionPacket_WaypointPacket::alt() const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.WaypointPacket.alt)
  return alt_;
}
inline void ActionPacket_WaypointPacket::set_alt(float value) {
  set_has_alt();
  alt_ = value;
  // @@protoc_insertion_point(field_set:uavforge.ActionPacket.WaypointPacket.alt)
}

// required float speed = 5;
inline bool ActionPacket_WaypointPacket::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActionPacket_WaypointPacket::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActionPacket_WaypointPacket::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActionPacket_WaypointPacket::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float ActionPacket_WaypointPacket::speed() const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.WaypointPacket.speed)
  return speed_;
}
inline void ActionPacket_WaypointPacket::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:uavforge.ActionPacket.WaypointPacket.speed)
}

// -------------------------------------------------------------------

// ActionPacket

// required int32 priority = 1;
inline bool ActionPacket::has_priority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionPacket::set_has_priority() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionPacket::clear_has_priority() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionPacket::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 ActionPacket::priority() const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.priority)
  return priority_;
}
inline void ActionPacket::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:uavforge.ActionPacket.priority)
}

// required .uavforge.ActionPacket.ActionType action_type = 2;
inline bool ActionPacket::has_action_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionPacket::set_has_action_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionPacket::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionPacket::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::uavforge::ActionPacket_ActionType ActionPacket::action_type() const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.action_type)
  return static_cast< ::uavforge::ActionPacket_ActionType >(action_type_);
}
inline void ActionPacket::set_action_type(::uavforge::ActionPacket_ActionType value) {
  assert(::uavforge::ActionPacket_ActionType_IsValid(value));
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:uavforge.ActionPacket.action_type)
}

// repeated .uavforge.ActionPacket.WaypointPacket waypoints = 3;
inline int ActionPacket::waypoints_size() const {
  return waypoints_.size();
}
inline void ActionPacket::clear_waypoints() {
  waypoints_.Clear();
}
inline const ::uavforge::ActionPacket_WaypointPacket& ActionPacket::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:uavforge.ActionPacket.waypoints)
  return waypoints_.Get(index);
}
inline ::uavforge::ActionPacket_WaypointPacket* ActionPacket::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:uavforge.ActionPacket.waypoints)
  return waypoints_.Mutable(index);
}
inline ::uavforge::ActionPacket_WaypointPacket* ActionPacket::add_waypoints() {
  // @@protoc_insertion_point(field_add:uavforge.ActionPacket.waypoints)
  return waypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::uavforge::ActionPacket_WaypointPacket >&
ActionPacket::waypoints() const {
  // @@protoc_insertion_point(field_list:uavforge.ActionPacket.waypoints)
  return waypoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::uavforge::ActionPacket_WaypointPacket >*
ActionPacket::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:uavforge.ActionPacket.waypoints)
  return &waypoints_;
}

// -------------------------------------------------------------------

// InfoPacket

// optional uint32 pointsStorable = 1;
inline bool InfoPacket::has_pointsstorable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfoPacket::set_has_pointsstorable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfoPacket::clear_has_pointsstorable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfoPacket::clear_pointsstorable() {
  pointsstorable_ = 0u;
  clear_has_pointsstorable();
}
inline ::google::protobuf::uint32 InfoPacket::pointsstorable() const {
  // @@protoc_insertion_point(field_get:uavforge.InfoPacket.pointsStorable)
  return pointsstorable_;
}
inline void InfoPacket::set_pointsstorable(::google::protobuf::uint32 value) {
  set_has_pointsstorable();
  pointsstorable_ = value;
  // @@protoc_insertion_point(field_set:uavforge.InfoPacket.pointsStorable)
}

// optional uint32 battery = 2;
inline bool InfoPacket::has_battery() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfoPacket::set_has_battery() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfoPacket::clear_has_battery() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfoPacket::clear_battery() {
  battery_ = 0u;
  clear_has_battery();
}
inline ::google::protobuf::uint32 InfoPacket::battery() const {
  // @@protoc_insertion_point(field_get:uavforge.InfoPacket.battery)
  return battery_;
}
inline void InfoPacket::set_battery(::google::protobuf::uint32 value) {
  set_has_battery();
  battery_ = value;
  // @@protoc_insertion_point(field_set:uavforge.InfoPacket.battery)
}

// repeated string infoStrings = 3;
inline int InfoPacket::infostrings_size() const {
  return infostrings_.size();
}
inline void InfoPacket::clear_infostrings() {
  infostrings_.Clear();
}
inline const ::std::string& InfoPacket::infostrings(int index) const {
  // @@protoc_insertion_point(field_get:uavforge.InfoPacket.infoStrings)
  return infostrings_.Get(index);
}
inline ::std::string* InfoPacket::mutable_infostrings(int index) {
  // @@protoc_insertion_point(field_mutable:uavforge.InfoPacket.infoStrings)
  return infostrings_.Mutable(index);
}
inline void InfoPacket::set_infostrings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:uavforge.InfoPacket.infoStrings)
  infostrings_.Mutable(index)->assign(value);
}
inline void InfoPacket::set_infostrings(int index, const char* value) {
  infostrings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:uavforge.InfoPacket.infoStrings)
}
inline void InfoPacket::set_infostrings(int index, const char* value, size_t size) {
  infostrings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uavforge.InfoPacket.infoStrings)
}
inline ::std::string* InfoPacket::add_infostrings() {
  return infostrings_.Add();
}
inline void InfoPacket::add_infostrings(const ::std::string& value) {
  infostrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:uavforge.InfoPacket.infoStrings)
}
inline void InfoPacket::add_infostrings(const char* value) {
  infostrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:uavforge.InfoPacket.infoStrings)
}
inline void InfoPacket::add_infostrings(const char* value, size_t size) {
  infostrings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:uavforge.InfoPacket.infoStrings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InfoPacket::infostrings() const {
  // @@protoc_insertion_point(field_list:uavforge.InfoPacket.infoStrings)
  return infostrings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InfoPacket::mutable_infostrings() {
  // @@protoc_insertion_point(field_mutable_list:uavforge.InfoPacket.infoStrings)
  return &infostrings_;
}

// -------------------------------------------------------------------

// AckPacket

// required uint64 ackTimestamp = 1;
inline bool AckPacket::has_acktimestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckPacket::set_has_acktimestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckPacket::clear_has_acktimestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckPacket::clear_acktimestamp() {
  acktimestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_acktimestamp();
}
inline ::google::protobuf::uint64 AckPacket::acktimestamp() const {
  // @@protoc_insertion_point(field_get:uavforge.AckPacket.ackTimestamp)
  return acktimestamp_;
}
inline void AckPacket::set_acktimestamp(::google::protobuf::uint64 value) {
  set_has_acktimestamp();
  acktimestamp_ = value;
  // @@protoc_insertion_point(field_set:uavforge.AckPacket.ackTimestamp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace uavforge

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::uavforge::Packet_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uavforge::Packet_MessageType>() {
  return ::uavforge::Packet_MessageType_descriptor();
}
template <> struct is_proto_enum< ::uavforge::ActionPacket_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uavforge::ActionPacket_ActionType>() {
  return ::uavforge::ActionPacket_ActionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_2eproto__INCLUDED
